//http://nboddula.blogspot.ru/2012/11/msp430-using-usi-for-uart-i2c.html

#include <msp430f2013.h>
#include <string.h>
 
/* Demo UART application. Transfers and Receives bytes to and from the computer
* at 9600 bps. Currently, it can transfer a string of any size, but it can only
* receive a single character. Sending bulk information from PC to micro-controller
* is rare and this is not supported yet.
*
* Nick Bodd
* Nov 27, 2012
*/
 
#define LED BIT0
#define TXD BIT1
#define RXD BIT2
 
/* Ticks per bit, and ticks per half. Use the following values based on speed:
* 9600 bps -> 13
* 2400 bps -> 52
*/
#define TPB 13
#define TPH TPB/2
 
/**
* TXRX variables
* A pointer to the data to send, and a counter of the bytes to send.
* The actual byte we are transmitting with its start and stop bits.
* The Byte that is being received.
* A counter of the bits left to send or to receive.
*/
unsigned char *data;
unsigned int bytestosend = 0;
int TXWord;
char RXByte;
unsigned char bitcnt = 0;
 
/* function prototypes */
void init_uart();
 
/* TX specific functions */
inline void TX_start();
void print(char *str);
 
/* RX specific functions */
inline void RX_start();
char receive();
 
/* Application specific functions */
void print_menu();
void execute_action( char choice );
 
 
/**
* Simple Demo
* 1. Display menu
* 2. Let the user enter a choice
* 3. Execute action
*/
void main() {
/* stop the watchdog timer */
WDTCTL = WDTPW + WDTHOLD;
 
/* LED off */
P1DIR |= LED;
P1OUT &= ~LED;
 
init_uart();
 
for( ; ; ) {
print_menu();
RXByte = receive();
execute_action(RXByte);
}
}
 
/**
* Display the menu for UART user.
*/
void print_menu() {
print("\nWelcome !! Please select your choice.. \r\n");
print("1. Display greetings\r\n");
print("2. Show current temperature\r\n");
print("3. Display EEPROM data\r\n\n");
}
 
/**
* Executes the action depending on the user choice
*/
void execute_action( char choice ) {
switch (choice) {
case '1': {
print("Welcome to the world of micro-controllers.. \r\n\n");
} break;
case '2' : {
//read temperature
} break;
case '3' : {
//display eeprom data
} break;
}
}
 
/**
* Initialize UART.
* Set up clock, timer, and pins
*/
void init_uart( void ) {
/* set up the clocks for 1 mhz */
BCSCTL1 = CALBC1_1MHZ;
DCOCTL = CALDCO_1MHZ;
/* RXD set for timer function, RXD input */
P1SEL |= RXD;
P1DIR &= ~RXD;
P1DIR |= TXD + LED;
//Turn of led, TX to high
P1OUT &= ~(LED);
P1OUT |= TXD;
/* Set timer A to use count up mode 1 mhz / 8 = 125 khz. */
TACTL = TASSEL_2 + MC_2 + ID_3 + TACLR;
}
 
/**
* Enables interrupts for the capture/compare register 0.
*/
void TX_start() {
/* Set ticks-per-bit to specify communication speed */
TACCR0 = TPB;
/* clear interrupt flag, and tell Timer A0 capture control to
* start triggering interrupts
*/
TACCTL0 &= ~CCIFG;
TACCTL0 |= CCIE;
}
 
/**
* Blocking call. Returns only after transmission is finished.
* Transmits a stream of characters through UART.
*/
void print(char *str) {
while (bytestosend != 0);
bitcnt = 0;
data = (unsigned char *) str;
bytestosend = strlen(str);
 
TX_start();
 
/* sleep until message sent */
while( TACCTL0 & CCIE ) {
__bis_SR_register( LPM0_bits + GIE );
}
}
 
/* This continuously sends bits of the TXWord starting from the
* least significant bit (the 0 start bit). One bit is sent every
* time the handler is activated.
*/
#pragma vector=TIMERA0_VECTOR
__interrupt void TimerA0() {
/* add ticks per bit to trigger again on next bit in stream */
CCR0 += TPB;
/* if no bits to send, either load a byte or return */
if( ! bitcnt ) {
if( bytestosend > 0 ) {
/* load the byte */
TXWord = *data++;
/* add stop bit */
TXWord |= 0x100;
/* add start bit */
TXWord <<= 1;
 
/* 1 start bit + 8 data bits + 1 stop bit */
bitcnt = 10;
 
bytestosend --;
} else {
/* no bits left, turn off interrupts and wake up */
TACCTL0 &= ~ CCIE;
__bic_SR_register_on_exit( LPM0_bits );
return;
}
}
 
/* send least significant bit */
if( TXWord & 0x01 ) {
P1OUT |= TXD;
} else {
P1OUT &= ~TXD;
}
 
/* shift word to remove one bit */
TXWord >>= 1;
bitcnt --;
TACCTL0 &= ~CCIFG;
}
 
/**
* Sets up the capture register 1 for receiving.
*/
void RX_start() {
/* Make ready to receive character. Syncronize, negative edge
* capture, enable interrupts.
*/
bitcnt = 8;
CCTL1 = SCS + OUTMOD0 + CM_2 + CAP + CCIE;
CCTL1 &= ~CCIFG;
}
 
/**
* Receives a single character.
*/
char receive() {
RX_start();
while (TACCTL1 & CCIE) {
/* go to sleep and wait for data */
__bis_SR_register( LPM0_bits + GIE );
}
return RXByte;
}
 
/**
* It receives each bit through UART and shifts data bits right.
*/
#pragma vector=TIMERA1_VECTOR
__interrupt void TimerA1(void) {
/* add ticks per bit to trigger again on next bit in stream */
CCR1 += TPB;
/* If we just caught the 0 start bit, then turn off capture
* mode (it'll be all compares from here forward) and add
* ticks-per-half so we'll catch signals in the middle of
* each bit.
*/
if( CCTL1 & CAP ) {
/* 8 bits pending */
bitcnt = 8;
 
/* next interrupt in 1.5 bits (i.e. in middle of next bit) */
CCR1 += TPH;
 
/* reset capture mode and interrupt flag */
CCTL1 &= ~ ( CAP + CCIFG );
} else {
/* Otherwise we need to catch another bit. We'll shift right
* the currently received data, and add new bits on the left.
*/
RXByte >>= 1;
if( CCTL1 & SCCI ) {
RXByte |= 0x80;
}
bitcnt --;
/* last bit received */
if( ! bitcnt ) {
P1OUT &= ~(LED); // for testing
TACCTL1 &= ~CCIE;
__bic_SR_register_on_exit( LPM0_bits );
}
}
 
/* reset the interrupt flag */
CCTL1 &= ~CCIFG;
}
